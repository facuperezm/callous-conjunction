---
import Layout from "../layouts/Layout.astro";
import "@fontsource-variable/big-shoulders-display";
import "@fontsource/poppins";
---

<Layout title="AI Translations">
  <header class="relative bg-[#0D182E]">
    <img
      src="/world.png"
      alt="World"
      class="absolute inset-y-0 right-0 h-full object-cover"
    />
    <div class="flex items-center justify-center gap-4 py-20">
      <img src="/parrot.png" alt="PollyGlot" class="" />
      <div class="z-10">
        <h1 class="font-serif text-4xl font-extrabold text-[#32CD32]">
          PollyGlot
        </h1>
        <h2 class="font-sans text-xs font-semibold text-white">
          Perfect Translation Every Time
        </h2>
      </div>
    </div>
  </header>
  <main class="mx-auto max-w-2xl p-4">
    <section class="rounded-2xl border-4 border-[#252F42] p-3">
      <form>
        <div class="wrapper-form">
          <h3
            class="py-4 text-center font-sans text-2xl font-bold text-[#035A9D]"
          >
            Text to translate ðŸ‘‡
          </h3>
          <textarea
            name="text"
            placeholder="How are you?"
            class="w-full rounded-lg bg-[#EFF0F4] p-4"></textarea>
          <div class="mx-auto text-xl">
            <p
              class="py-4 text-center font-sans text-2xl font-bold text-[#035A9D]"
            >
              Select language ðŸ‘‡
            </p>
            <div class="mx-auto max-w-56 md:max-w-md">
              <input type="radio" id="french" name="language" value="french" />
              <label for="french">French ðŸ‡«ðŸ‡·</label>
            </div>
            <div class="mx-auto max-w-56 md:max-w-md">
              <input
                type="radio"
                id="spanish"
                name="language"
                value="spanish"
              />
              <label for="spanish">Spanish ðŸ‡ªðŸ‡¸</label>
            </div>
            <div class="mx-auto max-w-56 md:max-w-md">
              <input
                type="radio"
                id="japanese"
                name="language"
                value="japanese"
              />
              <label for="japanese">Japanese ðŸ‡¯ðŸ‡µ</label>
            </div>
          </div>
          <button
            class="mb-2 mt-4 w-full rounded-md bg-[#035A9D] p-2 text-center font-sans text-2xl font-bold text-white"
            >Translate</button
          >
        </div>
        <div class="loading-translation hidden">
          <h3
            class="py-4 text-center font-sans text-2xl font-bold text-[#035A9D]"
          >
            Translation in progress...
          </h3>
          <img
            src="/loading.svg"
            alt="Loading"
            class="animate- mx-auto w-1/2 max-w-xs"
          />
        </div>
        <div class="wrapper-response hidden">
          <h3
            class="py-4 text-center font-sans text-2xl font-bold text-[#035A9D]"
          >
            Original text ðŸ‘‡
          </h3>
          <textarea
            class="original-text w-full rounded-lg bg-[#EFF0F4] p-4"
            disabled></textarea>
          <h3
            class="py-4 text-center font-sans text-2xl font-bold text-[#035A9D]"
          >
            Your translation ðŸ‘‡
          </h3>
          <textarea
            class="translated-text w-full rounded-lg bg-[#EFF0F4] p-4"
            disabled></textarea>
        </div>
      </form>
      <button
        class="reset-btn mb-2 mt-4 hidden w-full rounded-md bg-[#035A9D] p-2 text-center font-sans text-2xl font-bold text-white"
        >Start over</button
      >
    </section>
  </main>
</Layout>
<script>
  import OpenAI from "openai";

  const form = document.querySelector("form");
  const textArea = document.querySelector("textarea");
  const languageInputs = document.querySelectorAll(
    'input[name="language"]',
  ) as NodeListOf<HTMLInputElement>;

  const wrapperForm = document.querySelector(".wrapper-form");
  const wrapperResponse = document.querySelector(".wrapper-response");
  const loadingTranslation = document.querySelector(".loading-translation");
  const resetBtn = document.querySelector(
    ".reset-btn",
  ) as HTMLButtonElement | null;
  const translatedText = document.querySelector(
    ".translated-text",
  ) as HTMLTextAreaElement;
  const originalText = document.querySelector(
    ".original-text",
  ) as HTMLTextAreaElement;

  const getSelectedLanguage = () => {
    for (const input of languageInputs) {
      if (input.checked) {
        return input.value;
      }
    }
    return null;
  };

  async function translate(language: string, text: string): Promise<string> {
    const client = new OpenAI({
      apiKey: import.meta.env.PUBLIC_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true,
    });

    const response = await client.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content:
            "You are going to be a translator for PollyGlot, my AI application. You know how to translate from any language to French, Japanse and Spanish with no problems. Please in your response do not reply with anything else other than the translation itself, no greetings, no extra words.",
        },
        {
          role: "user",
          content: `Translate the following text to ${language}: ${text}`,
        },
      ],
    });

    const completion = response.choices[0].message.content;

    translatedText!.innerText = completion!;
    originalText!.innerText = text!.valueOf();

    return completion!;
  }

  form?.addEventListener("submit", async (e) => {
    e.preventDefault();

    wrapperForm?.classList.add("hidden");
    loadingTranslation?.classList.remove("hidden");

    const selectedLanguage = getSelectedLanguage();
    if (!selectedLanguage) {
      throw new Error("Please select a language to translate to.");
    }

    const textValue = textArea!.value;
    if (!textValue) {
      throw new Error("Please enter text to translate.");
    }

    try {
      const translated = await translate(selectedLanguage, textValue);

      originalText.value = textValue;
      translatedText.value = translated;
      // Simulate loading time
      setTimeout(() => {
        loadingTranslation?.classList.add("hidden");
        wrapperResponse?.classList.remove("hidden");
        resetBtn?.classList.remove("hidden");
      }, 3000);
    } catch (error) {
      console.error("Translation error:", error);
      throw new Error("An error occurred while translating the text.");
    }
  });

  resetBtn?.addEventListener("click", () => {
    if (wrapperForm) wrapperForm.classList.remove("hidden");
    if (loadingTranslation) loadingTranslation.classList.add("hidden");
    if (wrapperResponse) wrapperResponse.classList.add("hidden");
    if (textArea) textArea.value = "";
    if (translatedText) translatedText.value = "";
    if (originalText) originalText.value = "";
    if (resetBtn) resetBtn.classList.add("hidden");

    languageInputs.forEach((input) => (input.checked = false));
    textArea?.focus();
  });
</script>
